"""
/*
 *        copyright (c) 2012-2017 Oscar Riveros. all rights reserved.
 *                           oscar.riveros@peqnp.com
 *
 *    without any restriction, Oscar Riveros reserved rights, patents and
 *  commercialization of this knowledge or derived directly from this work.
*/

https://twitter.com/maxtuno
"""

def load(file_name):
    global mm
    with open(file_name) as msp_file:
        spam_reader = csv.reader(msp_file, delimiter=' ')
        uu = []
        for row in spam_reader:
            mm[int(row[0]), int(row[1])] = True
            mm[int(row[1]), int(row[0])] = True
            if int(row[0]) not in uu:
                uu.append(int(row[0]))
            if int(row[1]) not in uu:
                uu.append(int(row[1]))
    return uu


if __name__ == '__main__':

    import csv
    import networkx as nx

    mm = {}

    # data => http://networkrepository.com/bio-human-gene2.php
    uu = load('bio-human-gene2.edges')

    uu =  [5904, 83, 702, 4924, 6756, 852, 9605, 13492, 1193, 793, 3390, 1275, 8912, 6351, 1312, 6369, 6871, 1545, 4519, 598, 8470, 3181, 1865, 9539, 603, 362, 6718, 6355, 9813, 8805, 9884, 6057, 5213, 10061, 10446, 10324, 2908, 13500, 13289, 5236, 617, 10340, 344, 173, 13134, 8738, 9744, 10295, 10523, 9787, 3793, 4738, 3773, 723, 4770, 549, 10264, 8479, 13710, 3672, 12457, 3985, 10091, 9759, 6251, 4703, 14033, 9268, 10326, 13871, 6236, 12796, 4726, 10286, 4991, 6672, 5223, 9108, 7330, 810, 6213, 9190, 9982, 7313, 12629, 13946, 12818, 5660, 7622, 13939, 6557, 3891, 9985, 9250, 9853, 8559, 13800, 7894, 7995, 7797, 5638, 6100, 12722, 13656, 13900, 10397, 12480, 7752, 4502, 4634, 12750, 13506, 13359, 13004, 6422, 7607, 10165, 13241, 6035, 7983, 8026, 7676, 10052, 5432, 6608, 6041, 6470, 13897, 7643, 6724, 13820, 4618, 5916, 5686, 13810, 7294, 5981, 5355, 6223, 9854, 5052, 9263, 4943, 9718, 9526, 6641, 6321, 5918, 10292, 5585, 13258, 209, 9508, 13391, 7966, 5553, 5168, 5826, 7723, 529, 4754, 10614, 5453, 10088, 2509, 10435, 13894, 6595, 5734, 6051, 5314, 10301, 7393, 5781, 1002, 8577, 7639, 4358, 8095, 6084, 3111, 13190, 5312, 1502, 8507, 9005, 9236, 10591, 8940, 10203, 5071, 12907, 10337, 5370, 4670, 10695, 7564, 2865, 10149, 6379, 13140, 1659, 13950, 7736, 612, 5140, 10026, 9109, 6071, 4762, 5306, 2864, 13040, 13353, 12996, 9717, 7729, 6065, 13952, 9572, 5725, 10423, 4555, 10173, 4140, 6469, 10042, 13145, 7728, 9908, 13418, 10568, 10445, 3455, 10604, 945, 6362, 13086, 8178, 13535, 1952, 6002, 7508, 10169, 6596, 10027, 9009, 6558, 4420, 13177, 9894, 6107, 11658, 13819, 9106, 7358, 6172, 9292, 553, 6049, 2686, 7957, 9984, 13930, 6561, 5190, 6280, 13454, 13944, 2871, 13827, 11434, 10457, 1170, 6201, 3861, 5855, 9838, 4360, 13174, 13023, 12369, 6080, 12912, 10319, 2316, 7668, 13346, 10444, 8892, 12676, 13883, 9976, 4975, 12675, 13063, 7919, 4812, 13915, 12929, 164, 10322, 6022, 14332, 5718, 7898, 12928, 556, 8741, 7829, 8066, 4227, 6622, 13467, 6481, 9758, 4663, 229, 10345, 9708, 13367, 4440, 13903, 1509, 8696, 6182, 5228, 13942, 10137, 4429, 13680, 6092, 5806, 3825, 9796, 7961, 6246, 12569, 5977, 5262, 5447, 5542, 4317, 4808, 12241, 7720, 5472, 4977, 5726, 7795, 13408, 1506, 13861, 9032, 1880, 8745, 5456, 12041, 13294, 2590, 13796, 4843, 9191, 2267, 13679, 9170, 13911, 3289, 7345, 4190, 5128, 348, 2820, 5538, 9297, 5947, 4385, 7771, 6621, 6730, 6544, 7903, 9555, 3041, 249, 5056, 13166, 9995, 10110, 6205, 5675, 6566, 6310, 6993, 5925, 6260, 7949, 13313, 7636, 5372, 3000, 6112, 9887, 8704, 10126, 6716, 7669, 13947, 4996, 13137, 9685, 5680, 6190, 6219, 512, 6430, 14241, 4233, 6101, 5518, 9851, 13881, 10284, 3695, 7834, 9776, 5583, 545, 13397, 13809, 13494, 10287, 4678, 8417, 13431, 7412, 4709, 13456, 10263, 10219, 13008, 3820, 6209, 9809, 7917, 1844, 4595, 10020, 13041, 732, 4839, 4447, 9146, 6010, 5463, 9144, 13089, 10590, 6452, 10323, 9559, 13803, 6274, 2692, 13426, 6254, 12729, 4932, 3529, 7584, 1172, 13684, 4758, 6660, 2617, 5684, 7830, 6527, 10476, 13480, 10400, 13007, 13937, 4912, 12874, 5988, 5537, 13248, 9821, 8236, 6389, 4536, 13216, 7650, 13144, 2341, 6722, 8090, 5917, 5942, 10504, 13833, 7575, 10600, 4772, 7853, 13568, 547, 4402, 3465, 4481, 4621, 5768, 13884, 9878, 2894, 4013, 9313, 10210, 13630, 5185, 6563, 3604, 5905, 5390, 5501, 6489, 7563, 4747, 469, 303, 374, 3724, 5532, 13293, 7502, 4763, 6728, 5604, 4199, 4891, 593, 14060, 197, 9651, 7926, 3700, 5122, 12499, 10312, 8205, 5045, 550, 7392, 5764, 12799, 10334, 10158, 9925, 10524, 9258, 13799, 6598, 14161, 187, 13440, 433, 2561, 5574, 6556, 9265, 4071, 4715, 2594, 6555, 3503, 9299, 5951, 13635, 8701, 10129, 12777, 6179, 10186, 6171, 3826, 13188, 9226, 7514, 6726, 1871, 13898, 10566, 5815, 13444, 6496, 13793, 14061, 5603, 3965, 13914, 5041, 8332, 10320, 4347, 4003, 8597, 13233, 13744, 13445, 10468, 13934, 14133, 4007, 778, 398, 506, 4117, 9162, 225, 4797, 9656, 14019, 12637, 12266, 12826, 7757, 4784, 9716, 14040, 10251, 6882, 6263, 13439, 4592, 10029, 10607, 4817, 613, 12411, 12122, 13886, 8915, 3968, 12876, 386, 6513, 10540, 9909, 6308, 4097, 13713, 7449, 14143, 5882, 6593, 7616, 9185, 9574, 1825, 9048, 13111, 6581, 4045, 4116, 3596, 9847, 7715, 5475, 5716, 5703, 6118, 7144, 9281, 4062, 4769, 10201, 3737, 9902, 2980, 12924, 10460, 5862, 7968, 13945, 10506, 9662, 9939, 5017, 5819, 10402, 4059, 191, 14059, 9512, 2210, 8797, 13425, 6214, 6427, 13046, 13433, 14301, 5689, 10344, 4425, 9597, 3762, 5945, 5941, 12821, 5838, 10216, 6380, 6283, 6487, 9216, 10692, 9167, 13586, 13642, 3399, 7531, 7922, 3264, 12738, 4510, 599, 13841, 12704, 539, 4910, 5543, 9695, 6472, 10016, 13896, 13677, 6704, 6020, 12764, 14273, 12650, 13652, 13847, 13736, 2872, 8551, 1735, 5833, 4732, 12362, 10347, 9883, 331, 5900, 1335, 4852, 3525, 8068, 5173, 1381, 5880, 5547, 575, 6571, 4527, 6269, 6510, 7594, 5902, 13675, 5194, 13696, 5460, 6317, 10352, 7311, 12931, 13298, 8611, 5089, 10407, 6237, 4089, 8035, 1039, 568, 5788, 12939, 6673, 9007, 12887, 6680, 9466, 2730, 1943, 7208, 9992, 6989, 10207, 7127, 10294, 4442, 10121, 9305, 6180, 3721, 9647, 10274, 10330, 2181, 9740, 9457, 3742, 5655, 5789, 7914, 9188, 7790, 3977, 9950, 6257, 2979, 5985, 10132, 9367, 4134, 12902, 10333, 14306, 10130, 5277, 4845, 12710, 9366, 12691, 3875, 5440, 7960, 8097, 10749, 9924, 5676, 5673, 4783, 7692, 6674, 4039, 9816, 4684, 10163, 13685, 12447, 10398, 10377, 10436, 6354, 10332, 13875, 2744, 4756, 6532, 6238, 9869, 2875, 4888, 13283, 9900, 13076, 4137, 6691, 13792, 165, 12864, 7001, 5807, 6007, 13435, 9938, 9917, 7844, 5898, 4683, 4159, 6529, 5365, 6142, 287, 14196, 4468, 3740, 13414, 280, 7433, 6712, 9530, 5873, 9680, 10293, 4658, 463, 13253, 13074, 6326, 9710, 6420, 10361, 3574, 13604, 10684, 8948, 10127, 8083, 4177, 6404, 3896, 5181, 9569, 8407, 4525, 7992, 3198, 321, 8522, 5371, 4506, 295, 5373, 12350, 5087, 9232, 5620, 2535, 10349, 6853, 11299, 211, 10273, 6364, 3833, 10153, 412, 13825, 13507, 589, 10010, 13121, 5668, 9218, 4410, ]

    gg = []
    for i in uu:
        for j in uu:
            if mm.get((i, j)):
                gg.append((i, j))

    G = nx.Graph(gg)

    print(G.degree(uu))
    print(set(G.degree(uu).values()), len(uu))
